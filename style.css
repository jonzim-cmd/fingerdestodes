/* Grundlegende Styles im Dark Mode */
body {
  margin: 0;
  font-family: Arial, sans-serif;
  background-color: #1e1e1e;
  color: #e0e0e0;
}

#app-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
  text-align: center;
}

header {
  margin-bottom: 20px;
}

/* Neon-Überschrift im Header (blutneonrot, futuristisch) */
header h1 {
  font-size: 3em;
  color: #ff073a;
  text-transform: uppercase;
  letter-spacing: 4px;
  text-shadow: 
    0 0 10px #ff0000,
    4px 4px 0 #ff0000,
    6px 6px 0 #ff0000,
    8px 8px 0 #ff0000,
    10px 10px 0 #ff0000;
  animation: titleGlow 2s ease-in-out infinite alternate;
  background: linear-gradient(45deg, #ff0000, #ff6b6b, #ff0000);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  transform-style: preserve-3d;
  position: relative;
}
@keyframes titleGlow {
  0% { text-shadow: 0 0 10px #ff0000; }
  100% { text-shadow: 0 0 30px #ff0000, 0 0 20px #ff0000; }
}

/* Controls (Klassenwahl und Anwesenheit) */
#controls {
  margin-bottom: 20px;
  position: relative;
}

#class-selector {
  display: inline-block;
  margin-bottom: 10px;
}

#classDropdown {
  padding: 8px;
  font-size: 16px;
  border-radius: 4px;
  border: none;
  background-color: #333;
  color: #fff;
}

.small-btn {
  margin-left: 10px;
  padding: 6px 12px;
  font-size: 14px;
  border: none;
  border-radius: 4px;
  background-color: #555;
  color: #fff;
  cursor: pointer;
  transition: background-color 0.2s;
}

.small-btn:hover {
  background-color: #777;
}

/* Dropdown für Anwesenheit: Wird relativ zum Wrapper positioniert */
#attendance-dropdown {
  position: absolute;
  top: 100%;        /* Direkt unterhalb des Toggle-Buttons im Wrapper */
  left: 0;          /* Linksbündig zum Wrapper */
  margin-top: 5px;  /* Kleiner Abstand */
  background: linear-gradient(145deg, #2a2a2a, #1a1a1a);
  border: 1px solid #555;
  box-shadow: 0 4px 8px rgba(0,0,0,0.3);
  border-radius: 8px;
  padding: 15px;
  width: auto;      /* Dynamische Breite */
  min-width: 200px;
  max-width: 90%;
  z-index: 10;
  text-align: left;
  max-height: 300px;
  overflow-y: auto;
  transition: opacity 0.3s ease, transform 0.3s ease;
}

/* Wenn das Dropdown ausgeblendet sein soll */
#attendance-dropdown.hidden {
  display: none;
}

/* Allgemeine .hidden-Klasse */
.hidden {
  display: none;
}

.attendance-item {
  display: flex;
  align-items: center;
  margin-bottom: 8px;
}

.attendance-item label {
  margin-left: 8px;
  font-size: 14px;
  color: #bbb;
}

/* Zentrale Aktionen: Große Buttons in der Mitte */
#main-actions {
  margin-bottom: 30px;
}

#actions {
  display: flex;
  justify-content: center;
  gap: 40px;
  flex-wrap: wrap;
}

.action-button-container {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.action-button {
  width: 450px;
  height: 450px;
  cursor: pointer;
  transition: transform 0.2s;
}

.action-button:hover {
  transform: scale(1.1);
}

.button-caption {
  margin-top: 8px;
  font-size: 16px;
}

/* Modal-Overlay */
.modal {
  position: fixed;
  z-index: 100;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(30, 30, 30, 0.9);
  display: flex;
  justify-content: center;
  align-items: center;
}

.modal-content {
  background-color: #2a2a2a;
  padding: 20px;
  border: 1px solid #444;
  border-radius: 8px;
  position: relative;
  width: 90%;
  height: 90%;
  overflow: hidden;
  text-align: center;
  animation: fadeIn 0.5s ease;
}

@keyframes fadeIn {
  from { opacity: 0; transform: scale(0.9); }
  to { opacity: 1; transform: scale(1); }
}

.close {
  position: absolute;
  top: 10px;
  right: 15px;
  color: #aaa;
  font-size: 28px;
  font-weight: bold;
  cursor: pointer;
  transition: color 0.2s;
}

.close:hover {
  color: #fff;
}

/* Ausgewählter Schüler Modal */
#selected-student {
  margin: 20px 0;
}

#student-name {
  font-size: 5em;
  margin-bottom: 20px;
  color: #ffa500;
}

#student-image {
  width: 600px;
  max-width: 90%;
  border-radius: 10px;
}

/* Gruppeneinteilung Modal - Rasteransicht */
.grid-container {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
  gap: 10px;
  width: 100%;
  height: 100%;
  padding: 10px;
  box-sizing: border-box;
  overflow: auto;
}

/* Gruppen-Boxen */
.group-box {
  background-color: #333;
  border: 1px solid #444;
  border-radius: 6px;
  padding: 10px;
  text-align: center;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  overflow: hidden;
}

.group-box h3 {
  margin-top: 0;
  font-size: clamp(0.7em, 1.6vw, 1.1em);
  color: #ddd;
  margin-bottom: 10px;
}

.group-box ul {
  list-style: none;
  padding: 0;
  margin: 0;
  width: 100%;
  text-align: left;
}

.group-box li {
  font-size: clamp(1.0em, 2.0vw, 1.5em);
  color: #bbb;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  padding: 4px;
  cursor: pointer;
}

/* Visuelles Feedback beim Drag & Drop */
.sortable-chosen {
  background-color: #444;
}
.sortable-drag {
  opacity: 0.8;
}

/* App-Karten */
#app-cards {
  margin-bottom: 30px;
}

.app-grid {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 20px;
}

.app-item {
  background-color: #1e1e1e;
  padding: 15px;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);
  width: 500px; /* Kleinere Breite für die Karten */
  transition: transform 0.2s;
  text-align: center;
}

.app-item:hover {
  transform: scale(1.05);
}

.app-item img {
  width: 470px; /* Kleinere Bildgröße */
  height: auto;
  border-radius: 4px;
}

.app-item p {
  margin-top: 10px;
  font-weight: bold;
  font-size: 14px;
}

a {
  text-decoration: none;
  color: inherit;
}

/* Stile für Eingabefelder im Dark Mode */
input, select, textarea {
  background-color: #333 !important;
  color: #fff !important;
  border: 1px solid #555 !important;
  border-radius: 4px;
  padding: 8px;
  font-size: 16px;
}

/* Safari-spezifische Korrektur */
@media not all and (min-resolution:.001dpcm) { 
  @supports (-webkit-appearance:none) {
    input, select, textarea {
      -webkit-appearance: none;
      appearance: none;
      background-color: #333;
      color: #fff;
      padding: 8px;
      border-radius: 4px;
    }
    
    /* Zusätzlich für Select-Dropdowns */
    select {
      background-image: url("data:image/svg+xml;charset=UTF-8,%3Csvg..."); /* Pfeil-Icon */
      background-repeat: no-repeat;
      background-position: right 8px center;
    }
  }
}

/* Hintergrund für modale Eingabefelder explizit setzen */
.modal-content input {
  background-color: #333 !important;
}

/* Korrektur für Autocomplete-Hintergrund */
input:-webkit-autofill {
  -webkit-box-shadow: 0 0 0 1000px #333 inset !important;
  -webkit-text-fill-color: #fff !important;
}
Okay, der Benutzer hat ein Problem mit dem Eingabefeld in der Gruppenverteilung im Safari-Browser, das nicht im Dark Mode angezeigt wird. Zunächst muss ich verstehen, wo genau das Eingabefeld liegt. Da die Gruppenverteilung über ein Modal mit Prompt-Boxen erfolgt, die Gruppengrößen abfragen, handelt es sich bei den Eingabefeldern um diejenigen, die durch prompt() aufgerufen werden.

Nun ist bekannt, dass die systemeigenen Dialoge wie prompt() oder alert() nicht durch CSS gestylt werden können. Das bedeutet, dass diese Dialoge nicht automatisch den Dark Mode der Website übernehmen, insbesondere in Safari. Daher muss der Benutzer diese Eingabefelder durch benutzerdefinierte Modals ersetzen, um das Styling kontrollieren zu können.

Im aktuellen Code werden die Gruppengrößen über prompt() abgefragt. Um das Problem zu lösen, sollten diese durch eigene modale Dialoge ersetzt werden, die mit den vorhandenen Dark-Mode-Styles der Website gestylt sind.

Schritte zur Lösung:

1. **Ersetzen der prompt()-Aufrufe:** In der Funktion groupAssignment() werden die prompt()-Aufrufe durch benutzerdefinierte Modals ersetzt. Dazu müssen im HTML neue Modal-Elemente hinzugefügt werden, die Eingabefelder enthalten.

2. **Styling der neuen Modals:** Sicherstellen, dass die neuen Modals die bestehenden CSS-Stile für Dark Mode übernehmen, insbesondere die Hintergrundfarben, Textfarben und Eingabefeld-Styles.

3. **Anpassung der JavaScript-Logik:** Die Logik muss so umgeschrieben werden, dass sie auf die Benutzereingaben aus den neuen Modals wartet, anstatt blockierende prompt()-Aufrufe zu verwenden. Dies erfordert die Verwendung von Promises oder Callbacks, um den asynchronen Ablauf zu handhaben.

4. **Safari-spezifische CSS-Korrekturen:** Überprüfen, ob die Eingabefelder in den neuen Modals in Safari korrekt dargestellt werden. Eventuell sind zusätzliche CSS-Anpassungen nötig, um sicherzustellen, dass die Eingabefelder den Dark Mode respektieren.

Zusätzlich muss überprüft werden, ob die bestehenden CSS-Regeln für Eingabefelder im Dark Mode auch auf die neuen Modals angewendet werden. Möglicherweise gibt es in Safari spezifische Probleme mit der Darstellung, die durch zusätzliche -webkit- Präfixe oder spezifischere Selektoren behoben werden müssen.

Durch diese Änderungen werden die Eingabefelder in die bestehende Modallogik integriert, was eine konsistente Darstellung im Dark Mode across allen Browsern, einschließlich Safari, ermöglicht.

Um das Eingabefeld im Gruppenverteilungs-Modal in Safari korrekt im Dark Mode darzustellen, müssen wir die prompt()-Funktion durch ein benutzerdefiniertes Modal ersetzen. Hier sind die notwendigen Änderungen:

Füge diese neuen Modals in dein index.html vor dem schließenden </body>-Tag ein:

html
Copy
<!-- Modal für Gruppengrößen-Eingabe -->
<div id="modal-group-input" class="modal hidden">
  <div class="modal-content">
    <h2 id="group-input-title">Gruppengröße festlegen</h2>
    <input type="number" id="group-size-input" min="1" value="2" class="dark-input">
    <div class="modal-buttons">
      <button id="confirm-group-size" class="modal-btn">Bestätigen</button>
      <button id="cancel-group-size" class="modal-btn">Abbrechen</button>
    </div>
  </div>
</div>
Run HTML
Füge diese CSS-Regeln in deine style.css ein:

css
Copy
/* Custom Input Modal Styles */
#modal-group-input .modal-content {
  max-width: 400px;
  padding: 30px;
}

.dark-input {
  width: 100%;
  padding: 12px;
  margin: 15px 0;
  background: #333 !important;
  border: 1px solid #555 !important;
  color: #fff !important;
  border-radius: 4px;
  font-size: 16px;
}

.modal-buttons {
  display: flex;
  gap: 10px;
  justify-content: flex-end;
}

.modal-btn {
  padding: 8px 20px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  background: #444;
  color: #fff;
  transition: background 0.2s;
}

.modal-btn:hover {
  background: #666;
}

/* Safari specific fixes */
@media not all and (min-resolution:.001dpcm) { 
  @supports (-webkit-appearance:none) {
    .dark-input {
      -webkit-appearance: none;
      appearance: none;
    }
  }
}
Ersetze die groupAssignment()-Funktion in config.js durch diese überarbeitete Version:

js
Copy
function groupAssignment() {
  if (!studentData[currentClass]) return;
  
  const presentStudents = studentData[currentClass].filter(s => s.present).map(s => s.name);
  const anzahlAnwesend = presentStudents.length;
  
  if (anzahlAnwesend < 2) {
    alert("Zu wenige anwesende Schüler für die Gruppeneinteilung!");
    return;
  }

  // Neue Promise-basierte Eingabefunktion
  const getGroupSize = (title) => new Promise((resolve) => {
    const modal = document.getElementById('modal-group-input');
    const input = document.getElementById('group-size-input');
    const titleElement = document.getElementById('group-input-title');
    
    titleElement.textContent = title;
    input.value = '';
    modal.classList.remove('hidden');
    
    const confirmHandler = () => {
      const value = parseInt(input.value, 10);
      modal.classList.add('hidden');
      resolve(value);
    };
    
    const cancelHandler = () => {
      modal.classList.add('hidden');
      resolve(null);
    };
    
    document.getElementById('confirm-group-size').addEventListener('click', confirmHandler, {once: true});
    document.getElementById('cancel-group-size').addEventListener('click', cancelHandler, {once: true});
  });

  (async () => {
    const gruppenGroesse1 = await getGroupSize("Primäre Gruppengröße (z.B. 3):");
    if (!gruppenGroesse1 || gruppenGroesse1 <= 0 || gruppenGroesse1 > anzahlAnwesend) {
      alert("Ungültige primäre Gruppengröße!");
      return;
    }
    
    const gruppenGroesse2 = await getGroupSize("Sekundäre Gruppengröße (z.B. 2):");
    if (!gruppenGroesse2 || gruppenGroesse2 <= 0 || gruppenGroesse2 > anzahlAnwesend) {
      alert("Ungültige sekundäre Gruppengröße!");
      return;
    }

    // Rest der bestehenden Logik...
    const shuffled = presentStudents.slice();
    for (let i = shuffled.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    
    let anzahlGruppen1 = Math.floor(anzahlAnwesend / gruppenGroesse1);
    let restSchueler = anzahlAnwesend % gruppenGroesse1;
    
    while (restSchueler > 0 && (restSchueler % gruppenGroesse2 !== 0) && anzahlGruppen1 > 0) {
      anzahlGruppen1--;
      restSchueler += gruppenGroesse1;
    }
    
    if (restSchueler % gruppenGroesse2 !== 0) {
      alert("Keine sinnvolle Verteilung mit diesen Gruppengrößen möglich!");
      return;
    }
    
    const anzahlGruppen2 = restSchueler / gruppenGroesse2;
    const groups = [];
    let groupNumber = 1;
    let index = 0;
    
    // Primäre Gruppen
    for (let i = 0; i < anzahlGruppen1; i++) {
      const groupStudents = shuffled.slice(index, index + gruppenGroesse1);
      groups.push({ groupName: Gruppe ${groupNumber} (${gruppenGroesse1}er), students: groupStudents });
      index += gruppenGroesse1;
      groupNumber++;
    }
    
    // Sekundäre Gruppen
    for (let i = 0; i < anzahlGruppen2; i++) {
      const groupStudents = shuffled.slice(index, index + gruppenGroesse2);
      groups.push({ groupName: Gruppe ${groupNumber} (${gruppenGroesse2}er), students: groupStudents });
      index += gruppenGroesse2;
      groupNumber++;
    }
    
    if (groups.length > 0) {
      displayGroupResult(groups);
    } else {
      alert("Es konnten keine Gruppen gebildet werden.");
    }
  })();
}
